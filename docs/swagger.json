{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "CinemApp",
    "description": "CinemApp API Docs",
    "contact": {
      "email": "nicolasbertillod@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "host": "localhost:3000",
  "basePath": "/api",
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in the user and retrieve a JWT token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The user's username"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "description": "The user's password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "The JWT token to use for authentication"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out the user and revoke their JWT token",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "User logout successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string",
                  "example": "User logout successful."
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh the user's JWT token",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "The new JWT token to use for authentication"
                }
              }
            }
          }
        },
        "JWT": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header",
          "description": "JWT-based authentication"
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register the user and in case of an owner user it should also send an OTP via email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The user's email address",
                  "example": "some@email.com"
                },
                "username": {
                  "type": "string",
                  "description": "The user's name",
                  "example": "John Doe"
                },
                "company": {
                  "type": "string",
                  "description": "The user's company name",
                  "example": "Hoyts"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "description": "The user's password",
                  "example": "easyPassword123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User registration successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string",
                  "example": "User registration successful."
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "newuser@example.com"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-05-04T10:30:00Z"
                    }
                  }
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset the user's password, an email should be sent to the users email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The user's email address",
                  "example": "some@email.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string",
                  "example": "Password reset successfully."
                }
              }
            }
          }
        }
      }
    },
    "/auth/recover": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Recover user password with OTP sent via email",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "description": "The user's password",
                  "example": "easyPassword123"
                },
                "code": {
                  "type": "string",
                  "description": "The OTP sent via email",
                  "example": "AS34T9"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User password reset was successful",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string",
                  "example": "User password reset was successful."
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "newuser@example.com"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-05-04T10:30:00Z"
                    }
                  }
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        }
      }
    },
    "/auth/validate": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Validate an OTP",
        "description": "Validate an OTP",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OTP object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "code": {
                  "type": "string",
                  "example": "W23R03"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP validated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OTP"
            }
          },
          "500": {
            "description": "Error validating OTP",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error validating the OTP for the userId: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/cinemas": {
      "get": {
        "tags": [
          "Cinema"
        ],
        "summary": "Get all the Cinemas",
        "description": "Get all the Cinemas",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cinemas fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cinema"
              }
            }
          },
          "500": {
            "description": "Error in fetching Cinemas",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Cinemas"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cinema"
        ],
        "summary": "Save a new Cinema",
        "description": "Save a new Cinema",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Cinema object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Cinema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cinema saved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Hoyts Palermo"
                },
                "street": {
                  "type": "string",
                  "example": "Av. Santa Fe"
                },
                "streetNum": {
                  "type": "integer",
                  "example": "3650"
                },
                "state": {
                  "type": "string",
                  "example": "CABA"
                },
                "country": {
                  "type": "string",
                  "example": "Argentina"
                },
                "city": {
                  "type": "string",
                  "example": "Buenos Aires"
                },
                "neighborhood": {
                  "type": "string",
                  "example": "Palermo"
                },
                "latitude": {
                  "type": "number",
                  "example": -58.41030317402696
                },
                "longitude": {
                  "type": "number",
                  "example": -34.586202705534404
                },
                "price": {
                  "type": "number",
                  "example": 940
                },
                "enabled": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "500": {
            "description": "Error in saving Cinema",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the Cinema"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/cinemas/{id}": {
      "get": {
        "tags": [
          "Cinema"
        ],
        "summary": "Get a Cinema",
        "description": "Get a Cinema with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Cinema id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cinema fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Cinema"
            }
          },
          "500": {
            "description": "Error in fetching Cinema",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Cinema with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cinema"
        ],
        "summary": "Update a Cinema",
        "description": "Update a Cinema",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Cinema id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Cinema object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Cinema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cinema updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1cinemas/post/responses/200/schema"
            }
          },
          "500": {
            "description": "Error in updating Cinema",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the Cinema witd id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cinema"
        ],
        "summary": "Delete a Cinema",
        "description": "Delete a Cinema with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Cinema id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cinema deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Hoyts Palermo"
                },
                "street": {
                  "type": "string",
                  "example": "Av. Santa Fe"
                },
                "streetNum": {
                  "type": "integer",
                  "example": "3650"
                },
                "state": {
                  "type": "string",
                  "example": "CABA"
                },
                "country": {
                  "type": "string",
                  "example": "Argentina"
                },
                "city": {
                  "type": "string",
                  "example": "Buenos Aires"
                },
                "latitude": {
                  "type": "number",
                  "example": -58.41030317402696
                },
                "longitude": {
                  "type": "number",
                  "example": -34.586202705534404
                },
                "price": {
                  "type": "number",
                  "example": 940
                },
                "enabled": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "500": {
            "description": "Error in deleting Cinema",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting Cinema with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/cinemas/{id}/rooms": {
      "get": {
        "tags": [
          "Cinema"
        ],
        "summary": "Get all the Cinema's Rooms",
        "description": "Get all the Cinema's Rooms",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Rooms fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Room"
              }
            }
          },
          "500": {
            "description": "Error in fetching Rooms",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1rooms/get/responses/500/schema"
            }
          }
        }
      }
    },
    "/movies": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get all the Movies",
        "description": "Get all the Movies",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "lat",
            "description": "Latitude of the user",
            "type": "string"
          },
          {
            "in": "query",
            "name": "long",
            "description": "longitude of the user",
            "type": "string"
          },
          {
            "in": "query",
            "name": "title",
            "description": "Movie Title Filter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "distance",
            "description": "Distance between user and cinema Filter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "cinema",
            "description": "Cinema Filter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "genre",
            "description": "Movie Genre Filter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "score",
            "description": "Movie Score Filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Movies fetched successfully",
            "schema": {
              "type": "object",
              "properties": {
                "showing": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "id": 1,
                      "title": "The Batman",
                      "description": "The film sees Batman , who has been fighting crime in Gotham City for two years, uncover corruption while pursuing the Riddler (Dano), a serial killer who targets Gotham's corrupt elite.",
                      "duration": 120,
                      "releaseDate": "2022-03-04",
                      "genre": "Action",
                      "director": "Matt Reeves",
                      "cast": "Robert Pattinson, Zoë Kravitz, Paul Dano, Jeffrey Wright, John Turturro, Peter Sarsgaard, Barry Keoghan, Jayme Lawson, Andy Serkis, Colin Farrell",
                      "score": 8,
                      "certificate": "PG-13",
                      "imageUrl": "unsplash.com/example",
                      "createdAt": "2023-04-24T19:15:00.000Z",
                      "updatedAt": "2023-04-24T19:15:00.000Z"
                    }
                  }
                },
                "comingSoon": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "id": 2,
                      "title": "Spiderman: Far From Home",
                      "description": "Following the events of Avengers: Endgame (2019), Spider-Man must step up to take on new threats in a world that has changed forever.",
                      "duration": 120,
                      "releaseDate": "2019-03-04",
                      "genre": "Action",
                      "director": "Jon Watts",
                      "cast": "Tom Holland, Samuel L. Jackson, Jake Gyllenhaal, Marisa Tomei, Jon Favreau, Zendaya, Jacob Batalon, Tony Revolori, Angourie Rice, Remy Hii, Martin Starr, J. B. Smoove, Cobie Smulders, Numan Acar, Jorge Lendeborg Jr., Hemky Madera, Toni Garrn",
                      "certificate": "PG-13",
                      "imageUrl": "unsplash.com/example",
                      "createdAt": "2023-04-24T19:15:00.000Z",
                      "updatedAt": "2023-04-24T19:15:00.000Z"
                    }
                  }
                },
                "showingPagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 20
                    },
                    "totalResults": {
                      "type": "integer",
                      "example": 200
                    }
                  }
                },
                "comingSoonPagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "example": 5
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 20
                    },
                    "totalResults": {
                      "type": "integer",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error in fetching Movies",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Movies"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get a Movie",
        "description": "Get a Movie with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Movie id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Movie fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Movie"
            }
          },
          "500": {
            "description": "Error in fetching Movie",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Movie with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}/comments": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get all the Movies Comments",
        "description": "Get all the Movies Comments",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Comments fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1
                  },
                  "userId": {
                    "type": "integer",
                    "example": 1
                  },
                  "movieId": {
                    "type": "integer",
                    "example": 1
                  },
                  "title": {
                    "type": "string",
                    "example": "No es una gran pelicula"
                  },
                  "body": {
                    "type": "string",
                    "example": "La verdad es que es una pelicula muy aburrida y se hace muy larga, en especial el final es bastante malo"
                  },
                  "rating": {
                    "type": "integer",
                    "example": 3
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-04-24T19:15:00.000Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-04-24T19:15:00.000Z"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error in fetching Comments",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Comments"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Movie"
        ],
        "summary": "Get all the Movies Comments",
        "description": "Get all the Movies Comments",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "movieId": {
                  "type": "integer",
                  "example": 1
                },
                "title": {
                  "type": "string",
                  "example": "No es una gran pelicula"
                },
                "body": {
                  "type": "string",
                  "example": "La verdad es que es una pelicula muy aburrida y se hace muy larga, en especial el final es bastante malo"
                },
                "rating": {
                  "type": "integer",
                  "example": 3
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment created successfully",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1movies~1%7Bid%7D~1comments/get/responses/200/schema/items"
            }
          },
          "500": {
            "description": "Error in creating Comments",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the Comment"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}/screenings": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get the Movie Screenings near the user",
        "description": "Get the Movie Screenings near the user",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Movie Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lat",
            "description": "Latitude of the user",
            "type": "string"
          },
          {
            "in": "query",
            "name": "long",
            "description": "longitude of the user",
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Screening date",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order of the screening",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Screening"
              }
            }
          },
          "500": {
            "description": "Error in fetching Comments",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1screenings~1%7Bid%7D/get/responses/500/schema"
            }
          }
        }
      }
    },
    "/otp": {
      "get": {
        "tags": [
          "OTP"
        ],
        "summary": "Get all the OTPs",
        "description": "Get all the OTPs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OTPs fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OTP"
              }
            }
          },
          "500": {
            "description": "Error in fetching OTPs",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of OTPs"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OTP"
        ],
        "summary": "Save a new OTP",
        "description": "Save a new OTP",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OTP object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "code": {
                  "type": "string",
                  "example": "W23R03"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OTP"
            }
          },
          "500": {
            "description": "Error in saving OTP",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the OTP for the userId: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/otp/{id}": {
      "delete": {
        "tags": [
          "OTP"
        ],
        "summary": "Delete a OTP",
        "description": "Delete a OTP with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "OTP id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OTP deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "active": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            }
          },
          "500": {
            "description": "Error in deleting User",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting OTP with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "OTP"
        ],
        "summary": "Update a OTP",
        "description": "Update a OTP",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "OTP id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "OTP object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OTP"
            }
          },
          "500": {
            "description": "Error in updating OTP",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the OTP for the userId: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Get all the Reservations",
        "description": "Get all the Reservations",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Reservations fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reservation"
              }
            }
          },
          "500": {
            "description": "Error in fetching Reservations",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Reservations"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Save a new Reservation",
        "description": "Save a new Reservation",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reservation object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "example": 1
                },
                "screeningId": {
                  "type": "integer",
                  "example": 1
                },
                "seats": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "F8A7",
                    "F8A8"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Reservation"
            }
          },
          "500": {
            "description": "Error in saving Reservation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the Reservation"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/reservations/{id}": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Get a Reservation",
        "description": "Get a Reservation with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Reservation id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Reservation"
            }
          },
          "500": {
            "description": "Error in fetching Reservation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Reservation with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reservation"
        ],
        "summary": "Update a Reservation",
        "description": "Update a Reservation",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Reservation id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reservation object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Reservation"
            }
          },
          "500": {
            "description": "Error in updating Reservation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the Reservation with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reservation"
        ],
        "summary": "Delete a Reservation",
        "description": "Delete a Reservation with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Reservation id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation deleted successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Reservation"
            }
          },
          "500": {
            "description": "Error in deleting Reservation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting Reservation with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/rooms": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all the Rooms",
        "description": "Get all the Rooms",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Rooms fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Room"
              }
            }
          },
          "500": {
            "description": "Error in fetching Rooms",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Rooms"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Save a new Room",
        "description": "Save a new Room",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Room object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cinemaId": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Room 1"
                },
                "rows": {
                  "type": "integer",
                  "example": 10
                },
                "seats": {
                  "type": "integer",
                  "example": 20
                },
                "enabled": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Room"
            }
          },
          "500": {
            "description": "Error in saving Room",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the Room"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{id}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get a Room",
        "description": "Get a Room with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Room"
            }
          },
          "500": {
            "description": "Error in fetching Room",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Room with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "Update a Room",
        "description": "Update a Room",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Room object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Room"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Room"
            }
          },
          "500": {
            "description": "Error in updating Room",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the Room witd id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "Delete a Room",
        "description": "Delete a Room with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room deleted successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Room"
            }
          },
          "500": {
            "description": "Error in deleting Room",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting Room with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{id}/movies": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all the room's Movies",
        "description": "Get all the room's Movies",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Movies fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "500": {
            "description": "Error in fetching Movies",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1movies/get/responses/500/schema"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Save a new movie for a Room",
        "description": "Save a new movie for a Room",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id to add the movie",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "movieId",
            "description": "Movie id",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "movieId": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movie saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1rooms/post/parameters/0/schema"
            }
          },
          "500": {
            "description": "Error in saving the Movie",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error saving the movieId 2 in the Room with id 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{id}/premiers": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all the room's Movies premiered for this specific room",
        "description": "Get all the room's Movies premiered for this specific room",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Movies fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "500": {
            "description": "Error in fetching Movies",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1movies/get/responses/500/schema"
            }
          }
        }
      }
    },
    "/rooms/{id}/coming-soon": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get all the room's coming soon Movies",
        "description": "Get all the room's coming soon Movies",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Room id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Movies fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "500": {
            "description": "Error in fetching Movies",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1movies/get/responses/500/schema"
            }
          }
        }
      }
    },
    "/screenings": {
      "get": {
        "tags": [
          "Screening"
        ],
        "summary": "Get all the Screenings",
        "description": "Get all the Screenings",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Screenings fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Screening"
              }
            }
          },
          "500": {
            "description": "Error in fetching Screenings",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Screenings"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Screening"
        ],
        "summary": "Save a new Screening",
        "description": "Save a new Screening",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Screening object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "roomId": {
                  "type": "integer",
                  "example": 1
                },
                "movieId": {
                  "type": "integer",
                  "example": 1
                },
                "format": {
                  "type": "string",
                  "example": "subtitled"
                },
                "startAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-24T19:15:00.000Z"
                },
                "endAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-24T22:00:00.000Z"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Screening saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Screening"
            }
          },
          "500": {
            "description": "Error in saving Screening",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the Screening"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/screenings/{id}": {
      "get": {
        "tags": [
          "Screening"
        ],
        "summary": "Get a Screening",
        "description": "Get a Screening with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Screening id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Screening"
            }
          },
          "500": {
            "description": "Error in fetching Screening",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the Screening with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Screening"
        ],
        "summary": "Update a Screening",
        "description": "Update a Screening",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Screening id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Screening object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Screening"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Screening updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Screening"
            }
          },
          "500": {
            "description": "Error in updating Screening",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the Screening witd id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Screening"
        ],
        "summary": "Delete a Screening",
        "description": "Delete a Screening with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json\\"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Screening id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Screening deleted successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Screening"
            }
          },
          "500": {
            "description": "Error in deleting Screening",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting Screening with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all the Users",
        "description": "Get all the Users",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Error in fetching Users",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the list of Users"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Save a new User",
        "description": "Save a new User",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User saved successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Error in saving User",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error creating the User"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a User",
        "description": "Get a User with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User fetched successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Error in fetching User",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error fetching the User with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a User",
        "description": "Update a User",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User id that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "type": "string"
                },
                "company": {
                  "type": "string"
                },
                "avatarUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Error in updating User",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error updating the User witd id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a User",
        "description": "Delete a User with the id specified in parameter",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "email": {
                  "type": "string",
                  "example": "test@email.com"
                }
              }
            }
          },
          "500": {
            "description": "Error in deleting User",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "There was a server error deleting User with id: 1"
                },
                "code": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/users/${id}/cinemas": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a User's cinemas",
        "description": "Get a User's cinemas",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cinema"
              }
            }
          },
          "500": {
            "description": "Error in fetching User",
            "schema": {
              "type": "object",
              "$ref": "#/paths/~1users~1%7Bid%7D/get/responses/500/schema"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommonResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Cinema": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Hoyts Palermo"
        },
        "street": {
          "type": "string",
          "example": "Av. Santa Fe"
        },
        "streetNum": {
          "type": "integer",
          "example": "3650"
        },
        "state": {
          "type": "string",
          "example": "CABA"
        },
        "country": {
          "type": "string",
          "example": "Argentina"
        },
        "city": {
          "type": "string",
          "example": "Buenos Aires"
        },
        "neighborhood": {
          "type": "string",
          "example": "Palermo"
        },
        "latitude": {
          "type": "number",
          "example": -58.41030317402696
        },
        "longitude": {
          "type": "number",
          "example": -34.586202705534404
        },
        "price": {
          "type": "number",
          "example": 940
        },
        "enabled": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "Movie": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "title": {
          "type": "string",
          "example": "The Batman"
        },
        "description": {
          "type": "string",
          "example": "The film sees Batman , who has been fighting crime in Gotham City for two years, uncover corruption while pursuing the Riddler (Dano), a serial killer who targets Gotham's corrupt elite."
        },
        "duration": {
          "type": "number",
          "example": 120
        },
        "releaseDate": {
          "type": "string",
          "format": "date",
          "example": "2022-03-04"
        },
        "genre": {
          "type": "string",
          "example": "Action"
        },
        "director": {
          "type": "string",
          "example": "Matt Reeves"
        },
        "cast": {
          "type": "string",
          "example": "Robert Pattinson, Zoë Kravitz, Paul Dano, Jeffrey Wright, John Turturro, Peter Sarsgaard, Barry Keoghan, Jayme Lawson, Andy Serkis, Colin Farrell"
        },
        "score": {
          "type": "integer",
          "example": 8
        },
        "certificate": {
          "type": "string",
          "example": "PG-13"
        },
        "imageUrl": {
          "type": "string",
          "example": "unsplash.com/example"
        }
      }
    },
    "OTP": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "userId": {
          "type": "integer",
          "example": 1
        },
        "code": {
          "type": "string",
          "example": "W23R03"
        },
        "createdAt": {
          "type": "string",
          "example": "2023-04-07T19:14:13.000Z"
        },
        "updatedAt": {
          "type": "string",
          "example": "2023-04-07T19:14:13.000Z"
        },
        "active": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "userId": {
          "type": "integer",
          "example": 1
        },
        "screeningId": {
          "type": "integer",
          "example": 1
        },
        "seats": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "F8A7",
            "F8A8"
          ]
        },
        "createdAt": {
          "type": "string",
          "example": "2023-04-07T19:14:13.000Z"
        },
        "updatedAt": {
          "type": "string",
          "example": "2023-04-07T19:14:13.000Z"
        },
        "active": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1,
          "example": 1
        }
      },
      "required": [
        "id"
      ]
    },
    "Room": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "cinemaId": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Room 1"
        },
        "rows": {
          "type": "integer",
          "example": 10
        },
        "seats": {
          "type": "integer",
          "example": 20
        },
        "enabled": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "Screening": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "roomId": {
          "type": "integer",
          "example": 1
        },
        "movieId": {
          "type": "integer",
          "example": 1
        },
        "format": {
          "type": "string",
          "example": "subtitled"
        },
        "startAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-04-24T19:15:00.000Z"
        },
        "endAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-04-24T22:00:00.000Z"
        },
        "availableSeats": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "F1A1",
            "F1A2",
            "F1A3",
            "F2A6",
            "F4A7",
            "F3A8"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-04-24T19:15:00.000Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-04-24T19:15:00.000Z"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "client"
          ]
        }
      },
      "required": [
        "username",
        "email"
      ]
    }
  }
}
